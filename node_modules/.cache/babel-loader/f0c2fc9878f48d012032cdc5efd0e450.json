{"ast":null,"code":"import _taggedTemplateLiteral from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport { l as l2 } from \"./chunk.OXFFPZHD.js\";\nimport { defaultValue } from \"./chunk.ZNRFAEMI.js\";\nimport { checkbox_styles_default } from \"./chunk.TQ2U677E.js\";\nimport { FormControlController } from \"./chunk.DOQUAVYF.js\";\nimport { l } from \"./chunk.V47DPYLL.js\";\nimport { watch } from \"./chunk.VQ3XOPCT.js\";\nimport { o } from \"./chunk.ORW72H2K.js\";\nimport { ShoelaceElement, e, e2, i, t } from \"./chunk.Z5VD5WTS.js\";\nimport { y } from \"./chunk.DUT32TWM.js\";\nimport { __decorateClass } from \"./chunk.LKA3TPUC.js\";\n\n// src/components/checkbox/checkbox.ts\nvar SlCheckbox = /*#__PURE__*/function (_ShoelaceElement) {\n  _inherits(SlCheckbox, _ShoelaceElement);\n  function SlCheckbox() {\n    var _this;\n    _classCallCheck(this, SlCheckbox);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SlCheckbox).apply(this, arguments));\n    _this.formControlController = new FormControlController(_assertThisInitialized(_assertThisInitialized(_this)), {\n      value: function value(control) {\n        return control.checked ? control.value || \"on\" : void 0;\n      },\n      defaultValue: function defaultValue(control) {\n        return control.defaultChecked;\n      },\n      setValue: function setValue(control, checked) {\n        return control.checked = checked;\n      }\n    });\n    _this.hasFocus = false;\n    _this.title = \"\";\n    _this.name = \"\";\n    _this.size = \"medium\";\n    _this.disabled = false;\n    _this.checked = false;\n    _this.indeterminate = false;\n    _this.defaultChecked = false;\n    _this.form = \"\";\n    _this.required = false;\n    return _this;\n  }\n  _createClass(SlCheckbox, [{\n    key: \"firstUpdated\",\n    value: function firstUpdated() {\n      this.formControlController.updateValidity();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.checked = !this.checked;\n      this.indeterminate = false;\n      this.emit(\"sl-change\");\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      this.hasFocus = false;\n      this.emit(\"sl-blur\");\n    }\n  }, {\n    key: \"handleInput\",\n    value: function handleInput() {\n      this.emit(\"sl-input\");\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      this.hasFocus = true;\n      this.emit(\"sl-focus\");\n    }\n  }, {\n    key: \"handleDisabledChange\",\n    value: function handleDisabledChange() {\n      this.formControlController.setValidity(this.disabled);\n    }\n  }, {\n    key: \"handleStateChange\",\n    value: function handleStateChange() {\n      this.input.checked = this.checked;\n      this.input.indeterminate = this.indeterminate;\n      this.formControlController.updateValidity();\n    } /** Simulates a click on the checkbox. */\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.input.click();\n    } /** Sets focus on the checkbox. */\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this.input.focus(options);\n    } /** Removes focus from the checkbox. */\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.input.blur();\n    } /** Checks for validity but does not show a validation message. Returns true when valid and false when invalid. */\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity() {\n      return this.input.checkValidity();\n    } /** Checks for validity and shows a validation message if the control is invalid. */\n  }, {\n    key: \"reportValidity\",\n    value: function reportValidity() {\n      return this.input.reportValidity();\n    }\n    /**\n     * Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\n     * the custom validation message, call this method with an empty string.\n     */\n  }, {\n    key: \"setCustomValidity\",\n    value: function setCustomValidity(message) {\n      this.input.setCustomValidity(message);\n      this.formControlController.updateValidity();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return y(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <label\\n        part=\\\"base\\\"\\n        class=\", \"\\n      >\\n        <input\\n          class=\\\"checkbox__input\\\"\\n          type=\\\"checkbox\\\"\\n          title=\", \"\\n          name=\", \"\\n          value=\", \"\\n          .indeterminate=\", \"\\n          .checked=\", \"\\n          .disabled=\", \"\\n          .required=\", \"\\n          aria-checked=\", \"\\n          @click=\", \"\\n          @input=\", \"\\n          @blur=\", \"\\n          @focus=\", \"\\n        />\\n\\n        <span\\n          part=\\\"control\", \"\", \"\\\"\\n          class=\\\"checkbox__control\\\"\\n        >\\n          \", \"\\n          \", \"\\n        </span>\\n\\n        <slot part=\\\"label\\\" class=\\\"checkbox__label\\\"></slot>\\n      </label>\\n    \"])), o({\n        checkbox: true,\n        \"checkbox--checked\": this.checked,\n        \"checkbox--disabled\": this.disabled,\n        \"checkbox--focused\": this.hasFocus,\n        \"checkbox--indeterminate\": this.indeterminate,\n        \"checkbox--small\": this.size === \"small\",\n        \"checkbox--medium\": this.size === \"medium\",\n        \"checkbox--large\": this.size === \"large\"\n      }), this.title, this.name, l(this.value), l2(this.indeterminate), l2(this.checked), this.disabled, this.required, this.checked ? \"true\" : \"false\", this.handleClick, this.handleInput, this.handleBlur, this.handleFocus, this.checked ? \" control--checked\" : \"\", this.indeterminate ? \" control--indeterminate\" : \"\", this.checked ? y(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n                <sl-icon part=\\\"checked-icon\\\" class=\\\"checkbox__checked-icon\\\" library=\\\"system\\\" name=\\\"check\\\"></sl-icon>\\n              \"]))) : \"\", !this.checked && this.indeterminate ? y(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                <sl-icon\\n                  part=\\\"indeterminate-icon\\\"\\n                  class=\\\"checkbox__indeterminate-icon\\\"\\n                  library=\\\"system\\\"\\n                  name=\\\"indeterminate\\\"\\n                ></sl-icon>\\n              \"]))) : \"\");\n    }\n  }]);\n  return SlCheckbox;\n}(ShoelaceElement);\nSlCheckbox.styles = checkbox_styles_default;\n__decorateClass([i('input[type=\"checkbox\"]')], SlCheckbox.prototype, \"input\", 2);\n__decorateClass([t()], SlCheckbox.prototype, \"hasFocus\", 2);\n__decorateClass([e2()], SlCheckbox.prototype, \"title\", 2);\n__decorateClass([e2()], SlCheckbox.prototype, \"name\", 2);\n__decorateClass([e2()], SlCheckbox.prototype, \"value\", 2);\n__decorateClass([e2({\n  reflect: true\n})], SlCheckbox.prototype, \"size\", 2);\n__decorateClass([e2({\n  type: Boolean,\n  reflect: true\n})], SlCheckbox.prototype, \"disabled\", 2);\n__decorateClass([e2({\n  type: Boolean,\n  reflect: true\n})], SlCheckbox.prototype, \"checked\", 2);\n__decorateClass([e2({\n  type: Boolean,\n  reflect: true\n})], SlCheckbox.prototype, \"indeterminate\", 2);\n__decorateClass([defaultValue(\"checked\")], SlCheckbox.prototype, \"defaultChecked\", 2);\n__decorateClass([e2({\n  reflect: true\n})], SlCheckbox.prototype, \"form\", 2);\n__decorateClass([e2({\n  type: Boolean,\n  reflect: true\n})], SlCheckbox.prototype, \"required\", 2);\n__decorateClass([watch(\"disabled\", {\n  waitUntilFirstUpdate: true\n})], SlCheckbox.prototype, \"handleDisabledChange\", 1);\n__decorateClass([watch([\"checked\", \"indeterminate\"], {\n  waitUntilFirstUpdate: true\n})], SlCheckbox.prototype, \"handleStateChange\", 1);\nSlCheckbox = __decorateClass([e(\"sl-checkbox\")], SlCheckbox);\nexport { SlCheckbox };","map":null,"metadata":{},"sourceType":"module"}