{"ast":null,"code":"import _possibleConstructorReturn from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"D:\\\\New folder\\\\Prj\\\\csb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n// node_modules/@shoelace-style/localize/dist/index.js\nvar connectedElements = /* @__PURE__ */new Set();\nvar documentElementObserver = new MutationObserver(update);\nvar translations = /* @__PURE__ */new Map();\nvar documentDirection = document.documentElement.dir || \"ltr\";\nvar documentLanguage = document.documentElement.lang || navigator.language;\nvar fallback;\ndocumentElementObserver.observe(document.documentElement, {\n  attributes: true,\n  attributeFilter: [\"dir\", \"lang\"]\n});\nfunction registerTranslation() {\n  for (var _len = arguments.length, translation2 = new Array(_len), _key = 0; _key < _len; _key++) {\n    translation2[_key] = arguments[_key];\n  }\n  translation2.map(function (t) {\n    var code = t.$code.toLowerCase();\n    if (translations.has(code)) {\n      translations.set(code, Object.assign(Object.assign({}, translations.get(code)), t));\n    } else {\n      translations.set(code, t);\n    }\n    if (!fallback) {\n      fallback = t;\n    }\n  });\n  update();\n}\nfunction update() {\n  documentDirection = document.documentElement.dir || \"ltr\";\n  documentLanguage = document.documentElement.lang || navigator.language;\n  _toConsumableArray(connectedElements.keys()).map(function (el) {\n    if (typeof el.requestUpdate === \"function\") {\n      el.requestUpdate();\n    }\n  });\n}\nvar LocalizeController = /*#__PURE__*/function () {\n  function LocalizeController(host) {\n    _classCallCheck(this, LocalizeController);\n    this.host = host;\n    this.host.addController(this);\n  }\n  _createClass(LocalizeController, [{\n    key: \"hostConnected\",\n    value: function hostConnected() {\n      connectedElements.add(this.host);\n    }\n  }, {\n    key: \"hostDisconnected\",\n    value: function hostDisconnected() {\n      connectedElements.delete(this.host);\n    }\n  }, {\n    key: \"dir\",\n    value: function dir() {\n      return \"\".concat(this.host.dir || documentDirection).toLowerCase();\n    }\n  }, {\n    key: \"lang\",\n    value: function lang() {\n      return \"\".concat(this.host.lang || documentLanguage).toLowerCase();\n    }\n  }, {\n    key: \"term\",\n    value: function term(key) {\n      var _a, _b;\n      var locale = new Intl.Locale(this.lang());\n      var language = locale === null || locale === void 0 ? void 0 : locale.language.toLowerCase();\n      var region = (_b = (_a = locale === null || locale === void 0 ? void 0 : locale.region) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : \"\";\n      var primary = translations.get(\"\".concat(language, \"-\").concat(region));\n      var secondary = translations.get(language);\n      var term;\n      if (primary && primary[key]) {\n        term = primary[key];\n      } else if (secondary && secondary[key]) {\n        term = secondary[key];\n      } else if (fallback && fallback[key]) {\n        term = fallback[key];\n      } else {\n        console.error(\"No translation found for: \".concat(String(key)));\n        return String(key);\n      }\n      if (typeof term === \"function\") {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        return term.apply(void 0, args);\n      }\n      return term;\n    }\n  }, {\n    key: \"date\",\n    value: function date(dateToFormat, options) {\n      dateToFormat = new Date(dateToFormat);\n      return new Intl.DateTimeFormat(this.lang(), options).format(dateToFormat);\n    }\n  }, {\n    key: \"number\",\n    value: function number(numberToFormat, options) {\n      numberToFormat = Number(numberToFormat);\n      return isNaN(numberToFormat) ? \"\" : new Intl.NumberFormat(this.lang(), options).format(numberToFormat);\n    }\n  }, {\n    key: \"relativeTime\",\n    value: function relativeTime(value, unit, options) {\n      return new Intl.RelativeTimeFormat(this.lang(), options).format(value, unit);\n    }\n  }]);\n  return LocalizeController;\n}();\n\n// src/utilities/localize.ts\nvar LocalizeController2 = /*#__PURE__*/function (_LocalizeController) {\n  _inherits(LocalizeController2, _LocalizeController);\n  function LocalizeController2() {\n    _classCallCheck(this, LocalizeController2);\n    return _possibleConstructorReturn(this, _getPrototypeOf(LocalizeController2).apply(this, arguments));\n  }\n  return LocalizeController2;\n}(LocalizeController);\n\n// src/translations/en.ts\nvar translation = {\n  $code: \"en\",\n  $name: \"English\",\n  $dir: \"ltr\",\n  clearEntry: \"Clear entry\",\n  close: \"Close\",\n  copy: \"Copy\",\n  numOptionsSelected: function numOptionsSelected(num) {\n    if (num === 0) return \"No options selected\";\n    if (num === 1) return \"1 option selected\";\n    return \"\".concat(num, \" options selected\");\n  },\n  currentValue: \"Current value\",\n  hidePassword: \"Hide password\",\n  loading: \"Loading\",\n  progress: \"Progress\",\n  remove: \"Remove\",\n  resize: \"Resize\",\n  scrollToEnd: \"Scroll to end\",\n  scrollToStart: \"Scroll to start\",\n  selectAColorFromTheScreen: \"Select a color from the screen\",\n  showPassword: \"Show password\",\n  toggleColorFormat: \"Toggle color format\"\n};\nregisterTranslation(translation);\nvar en_default = translation;\nexport { en_default, registerTranslation, LocalizeController2 as LocalizeController };","map":null,"metadata":{},"sourceType":"module"}